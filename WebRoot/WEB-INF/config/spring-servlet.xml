<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!--使用 annotation 自动注册bean,只自动注册@Controller注解 其他注解不注册，自动去取父容器的-->
	<context:component-scan base-package="com" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 注解请求映射  -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">        
        <property name="interceptors">
            <list>  
                <bean class="com.interceptors.LogInterceptors"/>   <!-- 日志拦截器，这是你自定义的拦截器 -->
            </list>        
        </property>        
    </bean> 
	<!--<bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" /> 处理byteArray.. 
    --><bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" >
    	<property name="supportedMediaTypes">
    			<list>
    				<value>text/html;charset=UTF-8</value>
    				<value>application/x-www-form-urlencoded;charset=UTF-8</value>
    				<value>application/json;charset=UTF-8</value>
    			</list>
    	</property>
    </bean><!-- 处理字符串.. -->
    <bean id="fastjson_hmc" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" >
		<property name="charset" value="UTF-8"></property>    
		<property name="features">
			<list>
				<value>WriteNonStringKeyAsString</value>
				<value>WriteMapNullValue</value>
				<value>WriteDateUseDateFormat</value>
				<value>WriteNullBooleanAsFalse</value>
				<value>WriteNullListAsEmpty</value>
				<value>WriteNullNumberAsZero</value>
				<value>WriteNullStringAsEmpty</value>
				<value>SkipTransientField</value>
				<value>QuoteFieldNames</value>
			</list>
		</property>
		<property name="supportedMediaTypes">
    			<list>
    				<value>text/html;charset=UTF-8</value>
    				<value>application/x-www-form-urlencoded;charset=UTF-8</value>
    				<value>application/json;charset=UTF-8</value>
    			</list>
    	</property> 
    </bean><!-- 处理json-->
	
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<property name="messageConverters">  
            <list><!--  
                <ref bean="byteArray_hmc" />  
                --><ref bean="string_hmc" />  
                <ref bean="fastjson_hmc" />  
            </list>  
        </property>  
	</bean>
	
	<!-- 全局异常配置 start -->     
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
           		<!-- 表示当抛出NumberFormatException的时候就返回名叫number的视图 -->
                <prop key="java.lang.Exception">404.html</prop>  
                <prop key="java.lang.Throwable">500.html</prop>   
            </props>  
        </property>  
        <!-- 表示当抛出异常但没有在exceptionMappings里面找到对应的异常时 返回名叫exception的视图-->
        <property name="defaultErrorView" value="500.htm"/>
        <!-- 设置日志输出warnLogCategory的对象WARN -->     
        <property name="warnLogCategory" value="WARN"/>   
        <!-- 定义在发生异常时视图跟返回码的对应关系 -->  
        <property name="statusCodes">
            <props>  
            	<!-- 表示在发生NumberFormatException时返回视图number，然后这里定义发生异常时视图number对应的HttpServletResponse的返回码是500 -->
                <prop key="java.lang.Exception">404</prop>  
                <prop key="java.lang.Throwable">500</prop>  
            </props>  
        </property>  
        <!-- 表示在发生异常时默认的HttpServletResponse的返回码是多少，默认是200 --> 
        <property name="defaultStatusCode" value="404"/> 
    </bean>     
     <!-- 全局异常配置 end -->  
     	 
	<!-- 设置freeMarker的配置文件路径 -->
	<bean id="freemarkerConfiguration"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="/WEB-INF/config/freemarker.properties" />
	</bean>
	
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />
	<!-- 配置freeMarker的模板路径 -->
	<bean id="freemarkerConfig"
		class="com.utils.freemarker.MyFreeMarkerConfig">
		<property name="freemarkerSettings" ref="freemarkerConfiguration"/> 
		<property name="templateLoaderPath"><value>/views/</value></property> 
		<property name="freemarkerVariables">
				<map><entry key="xml_escape" value-ref="fmXmlEscape" /></map>
		</property>
	</bean>
	<!-- 配置freeMarker视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="viewNames" value="*.html" />
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value="" />
		<property name="order" value="2" />
		<!-- ${rc.XXX}取值 -->
        <property name="requestContextAttribute" value="rc" />  
        <!-- 将请求和会话属性作为变量暴露给FreeMarker模板使用。要做到这一点，可以设置exposeRequestAttributes或者exposeSessionAttributes为true -->  
        <property name="exposeRequestAttributes" value="true" />  
        <property name="exposeSessionAttributes" value="true" />  
        <!-- 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true -->  
        <property name="exposeSpringMacroHelpers" value="true" /> 
	</bean> 
	<!--这里为可选项-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
			<property name="defaultEncoding" value="utf-8" />  
          	<property name="maxUploadSize" value="10485760000" />  
          	<property name="maxInMemorySize" value="40960" /> 
    </bean> 
</beans>