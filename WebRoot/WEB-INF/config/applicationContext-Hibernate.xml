<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${hibernate.connection.driver_class}" />
		<property name="url" value="${hibernate.connection.url}" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${hibernate.connection.initialSize}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${hibernate.connection.maxActive}" />
		<!-- 最大空闲连接数 -->
		<!--<property name="maxIdle" value="${hibernate.connection.maxIdle}" /> -->
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${hibernate.connection.minIdle}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${hibernate.connection.maxWait}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${hibernate.connection.removeAbandoned}" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="${hibernate.connection.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${hibernate.connection.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${hibernate.connection.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 <property name="validationQuery" value="${hibernate.connection.validationQuery}" 
			/> 申请连接的时候检测 <property name="testWhileIdle" value="${hibernate.connection.testWhileIdle}" 
			/> 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 <property name="testOnBorrow" 
			value="${hibernate.connection.testOnBorrow}" /> 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 
			<property name="testOnReturn" value="${hibernate.connection.testOnReturn}" 
			/> --><!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${hibernate.connection.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${hibernate.connection.maxPoolPreparedStatementPerConnectionSize}" />
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
		<property name="filters" value="${hibernate.connection.filters}" />
	</bean>
	<!-- sessionFactory配置，同时数据源注入sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.bytecode.provider">${hibernate.bytecode.provider}</prop>

				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${org.hibernate.cache.ehcache_EhCacheRegionFactory}
				</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
				<prop key="hibernate.transaction.coordinator_class">${hibernate.transaction.coordinator_class}</prop>
				<prop key="jdbc.use_scrollable_resultset">${jdbc.use_scrollable_resultset}</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>${mappingLocations}</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置注解实现管理事务（cglib：proxy-target-class="true"） -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
</beans>